[
    {"qText": "What is array equal to?", "qCode": "(function(x, f = () => x) {\n var x;\n var y = x;\n x = 2;\n return [x, y, f()];\n})(1);", "answers":["[2, 1, 1]","[2, undefined, 1]","[2, 1, 2]","[2, undefined, 2]"], "hint":"[2, 1, 1]", "typos": "radio", "id": 0, "_page": 1},
    {"qText": "What is array equal to?", "qCode": "(function() {\n return [\n  (() => this.x).bind({ x: 'inner' })(),\n  (() => this.x)()\n ]\n}).call({ x: 'outer' });", "answers":["['inner', 'outer']","['outer', 'outer']","[undefined, undefined]","Error"], "hint":"['outer', 'outer']", "typos": "radio", "id": 1, "_page": 1},
    {"qText": "What is y equal to?", "qCode": "let x, { x: y = 1 } = { x }; y;", "answers":["undefined","1","{x:1}","Error"], "hint":"1", "typos": "radio", "id": 2, "_page": 1},
    {"qText": "What is array equal to?", "qCode": "(function() {\n let f = this ? class g { } : class h { };\n return [\n  typeof f,\n  typeof h\n ];\n})();", "answers":["['function', 'undefined']","['function', 'function']","['undefined', 'undefined']","Error"], "hint":"['function', 'undefined']", "typos": "radio", "id": 3, "_page": 1},
    {"qText": "What is o equal to?", "qCode": "let o = (typeof (new (class { class () {} })));", "answers":["function","object","undefined","Error"], "hint":"object", "typos": "radio", "id": 4, "_page": 2},
    {"qText": "What is u equal to?", "qCode": "let u = typeof (new (class F extends (String, Array) { })).substring;", "answers":["function","object","undefined","Error"], "hint":"undefined", "typos": "radio", "id": 5, "_page": 2},
    {"qText": "What is x equal to?", "qCode": "let x = [...[...'...']].length;", "answers":["1","3","6","Error"], "hint":"3", "typos": "radio", "id": 6, "_page": 2},
    {"qText": "What is u equal to?", "qCode": "let u = typeof `${{Object}}`.prototype;", "answers":["function","'undefined'","object","undefined","Error"], "hint":"'undefined'", "typos": "radio", "id": 7, "_page": 2},
    {"qText": "What is the expression equal to?", "qCode": "let express = [{go:12},{go:12},{go:18}];\nlet score = {\n on: 18,\n sort(o){\n  return o.go < this.on;\n }\n};\nlet res = express.filter(score.sort, score);\nconsole.log(res[0] === res[1])", "answers":["true","false"], "hint":"false", "typos": "radio", "id": 8, "_page": 3},
    {"qText": "Choose the correct option", "qCode": "let sheis = { spit: 'fire'};\nfunction A(a){ this.a = a; return this; };\nfunction B(b){ this.b = b; return this; };\nlet fa = new A(sheis);\nlet fb = new B(sheis);\nconsole.info(new A(sheis) === new B(sheis));\nconsole.info(new A(sheis).a === new B(sheis).b);", "answers":["false; false","true; false","false; true","true; true"], "hint":"false; true", "typos": "radio", "id": 9, "_page": 3},
    {"qText": "Choose the correct option", "qCode": "let baseObj = {one: '1', two: '2'};\nlet emptyObj = {};\nfor( let key in baseObj){\n  emptyObj[key] = baseObj[key];\n}\nlet assignObj = Object.assign({}, baseObj);\nconsole.log( emptyObj === assignObj );", "answers":["true","false"], "hint":"false", "typos": "radio", "id": 10, "_page": 3},
    {"qText": "Choose the correct option", "qCode": "let baseObj = {one: '1', two: '2'};\nlet emptyObj = {};\nfor( let key in baseObj){\n  emptyObj[key] = baseObj[key];\n}\nlet assignObj = Object.assign({}, baseObj);\nlet thirtObj = emptyObj;\nconsole.log( emptyObj === thirtObj );", "answers":["true","false"], "hint":"true", "typos": "radio", "id": 11, "_page": 3},
    {"qText": "Choose the correct option", "qCode": "let baseObj = {one: '1', two: '2'};\nlet assignObj = Object.assign({}, baseObj);\nlet tObj = assignObj;\nbaseObj.one = '3';\nconsole.log(baseObj.one, tObj.one);", "answers":["1, 1","1, 3","3, 1"], "hint":"3, 1", "typos": "radio", "id": 12, "_page": 4}
]